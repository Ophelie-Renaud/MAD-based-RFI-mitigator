/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2017 - 2021) :
 *
 * Alexandre Honorat <alexandre.honorat@insa-rennes.fr> (2021)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */


// Generic includes
#include "xcl2.hpp"
#include <vector>



// BEGIN OF AUTOGENERATED PART

#include "PreesmAutoDefinedSizes.h"


// END OF AUTOGENERATED PART


int main(int argc, char** argv) {

  if (argc != 2) {
    std::cout << "Usage: " << argv[0] << " <xclbin>" << std::endl;
    return EXIT_FAILURE;
  }

    auto binaryFile = argv[1];

    // OPENCL HOST CODE AREA START
    // Allocate Memory in Host Memory
    cl_int err;
    cl::Context context;
    cl::CommandQueue q;
    cl::Kernel krnl_mem_read, krnl_mem_write;
    
    // Create Program and Kernel
    auto fileBuf = xcl::read_binary_file(binaryFile);
    cl::Program::Binaries bins{{fileBuf.data(), fileBuf.size()}};

    auto devices = xcl::get_xil_devices();
    bool valid_device = false;
    for (unsigned int i = 0; i < devices.size(); i++) {
        auto device = devices[i];
        // Creating Context and Command Queue for selected Device
        OCL_CHECK(err, context = cl::Context(device, nullptr, nullptr, nullptr, &err));
        OCL_CHECK(err, q = cl::CommandQueue(context, device, CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE | CL_QUEUE_PROFILING_ENABLE, &err));

        std::cout << "Trying to program device[" << i << "]: " << device.getInfo<CL_DEVICE_NAME>() << std::endl;
        cl::Program program(context, {device}, bins, nullptr, &err);
        if (err != CL_SUCCESS) {
            std::cout << "Failed to program device[" << i << "] with xclbin file!\n";
        } else {
            std::cout << "Device[" << i << "]: program successful!\n";
            OCL_CHECK(err, krnl_mem_read = cl::Kernel(program, "mem_read_top_rfi_C", &err));
            OCL_CHECK(err, krnl_mem_write = cl::Kernel(program, "mem_write_top_rfi_C", &err));
            valid_device = true;
            break; // we break because we found a valid device
        }
    }

    if (!valid_device) {
        std::cout << "Failed to program any device found, exit!\n";
        exit(EXIT_FAILURE);
    }


    

    // BEGIN OF AUTOGENERATED PART


// vectors containing interface elements
  std::vector<double, aligned_allocator<double>> raw_data_real_i_vect(RATE_OF_RAW_DATA_REAL_I);
  std::vector<double, aligned_allocator<double>> raw_data_im_i_vect(RATE_OF_RAW_DATA_IM_I);
  std::vector<double, aligned_allocator<double>> raw_data_im_o_vect(RATE_OF_RAW_DATA_IM_O);
  std::vector<double, aligned_allocator<double>> raw_data_real_o_vect(RATE_OF_RAW_DATA_REAL_O);
  std::vector<double, aligned_allocator<double>> mad_R_o_vect(RATE_OF_MAD_R_O);
  std::vector<double, aligned_allocator<double>> raw_data_real_1_o_vect(RATE_OF_RAW_DATA_REAL_1_O);
  std::vector<double, aligned_allocator<double>> std_R_o_vect(RATE_OF_STD_R_O);
  std::vector<double, aligned_allocator<double>> raw_data_im_1_o_vect(RATE_OF_RAW_DATA_IM_1_O);
  std::vector<double, aligned_allocator<double>> mad_I_o_vect(RATE_OF_MAD_I_O);
  std::vector<double, aligned_allocator<double>> std_I_o_vect(RATE_OF_STD_I_O);
  std::vector<double, aligned_allocator<double>> filtered_im_0_o_vect(RATE_OF_FILTERED_IM_0_O);
  std::vector<double, aligned_allocator<double>> filtered_real_0_o_vect(RATE_OF_FILTERED_REAL_0_O);
  std::vector<double, aligned_allocator<double>> filtered_im_1_o_vect(RATE_OF_FILTERED_IM_1_O);
  std::vector<double, aligned_allocator<double>> filtered_real_1_o_vect(RATE_OF_FILTERED_REAL_1_O);


// buffers referencing interface elements
  OCL_CHECK(err, cl::Buffer raw_data_real_i_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, sizeof(double)*RATE_OF_RAW_DATA_REAL_I, raw_data_real_i_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer raw_data_im_i_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_READ_ONLY, sizeof(double)*RATE_OF_RAW_DATA_IM_I, raw_data_im_i_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer raw_data_im_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_RAW_DATA_IM_O, raw_data_im_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer raw_data_real_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_RAW_DATA_REAL_O, raw_data_real_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer mad_R_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_MAD_R_O, mad_R_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer raw_data_real_1_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_RAW_DATA_REAL_1_O, raw_data_real_1_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer std_R_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_STD_R_O, std_R_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer raw_data_im_1_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_RAW_DATA_IM_1_O, raw_data_im_1_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer mad_I_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_MAD_I_O, mad_I_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer std_I_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_STD_I_O, std_I_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer filtered_im_0_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_FILTERED_IM_0_O, filtered_im_0_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer filtered_real_0_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_FILTERED_REAL_0_O, filtered_real_0_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer filtered_im_1_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_FILTERED_IM_1_O, filtered_im_1_o_vect.data(), &err));
  OCL_CHECK(err, cl::Buffer filtered_real_1_o_buff(context, CL_MEM_USE_HOST_PTR | CL_MEM_WRITE_ONLY, sizeof(double)*RATE_OF_FILTERED_REAL_1_O, filtered_real_1_o_vect.data(), &err));


// set kernel arguments
  OCL_CHECK(err, err = krnl_mem_read.setArg(0, raw_data_real_i_buff));
  OCL_CHECK(err, err = krnl_mem_read.setArg(2, raw_data_im_i_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(0, raw_data_im_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(2, raw_data_real_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(4, mad_R_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(6, raw_data_real_1_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(8, std_R_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(10, raw_data_im_1_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(12, mad_I_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(14, std_I_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(16, filtered_im_0_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(18, filtered_real_0_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(20, filtered_im_1_o_buff));
  OCL_CHECK(err, err = krnl_mem_write.setArg(22, filtered_real_1_o_buff));
// launch the OpenCL tasks
  std::cout << "Copying data..." << std::endl;
  OCL_CHECK(err, err = q.enqueueMigrateMemObjects({raw_data_real_i_buff, raw_data_im_i_buff}, 0));
  OCL_CHECK(err, err = q.finish());
  std::cout << "Launching kernels..." << std::endl;
  OCL_CHECK(err, err = q.enqueueTask(krnl_mem_read));
  OCL_CHECK(err, err = q.enqueueTask(krnl_mem_write));
  OCL_CHECK(err, err = q.finish());
  std::cout << "Getting results..." << std::endl;
  OCL_CHECK(err, err = q.enqueueMigrateMemObjects({raw_data_im_o_buff, raw_data_real_o_buff, mad_R_o_buff, raw_data_real_1_o_buff, std_R_o_buff, raw_data_im_1_o_buff, mad_I_o_buff, std_I_o_buff, filtered_im_0_o_buff, filtered_real_0_o_buff, filtered_im_1_o_buff, filtered_real_1_o_buff}, CL_MIGRATE_MEM_OBJECT_HOST));
  OCL_CHECK(err, err = q.finish());



    // END OF AUTOGENERATED PART



    return EXIT_SUCCESS;
}
