-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_read_top_rfi_C is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    raw_data_real_i_stream_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    raw_data_real_i_stream_TVALID : OUT STD_LOGIC;
    raw_data_real_i_stream_TREADY : IN STD_LOGIC;
    raw_data_im_i_stream_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    raw_data_im_i_stream_TVALID : OUT STD_LOGIC;
    raw_data_im_i_stream_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mem_read_top_rfi_C is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mem_read_top_rfi_C_mem_read_top_rfi_C,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.591000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1246,HLS_SYN_LUT=1585,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_64000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001100100000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_63FFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001100011111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal raw_data_real_i_mem : STD_LOGIC_VECTOR (63 downto 0);
    signal raw_data_im_i_mem : STD_LOGIC_VECTOR (63 downto 0);
    signal current_rate_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal current_factor_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal current_rate : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal current_factor : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal and_ln56_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal and_ln56_reg_380_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal and_ln56_1_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_1_reg_393_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal raw_data_real_i_stream_TDATA_blk_n : STD_LOGIC;
    signal and_ln56_reg_380_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal raw_data_im_i_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal raw_data_im_i_mem_read_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal raw_data_real_i_mem_read_reg_375 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln56_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal and_ln56_reg_380_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_reg_380_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln56_1_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_1_reg_393_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_1_reg_393_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_1_reg_393_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_reg_397 : STD_LOGIC_VECTOR (63 downto 0);
    signal shouldContinue_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_shouldContinue_1_reg_140 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_retval_0_i11_reg_153 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln173_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln173_1_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln62_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln59_1_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln62_1_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_1_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal icmp_ln56_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_192_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln58_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln58_fu_204_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_209_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln56_2_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_3_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln58_1_fu_291_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln58_1_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln58_1_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln173_1_fu_308_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal regslice_both_raw_data_real_i_stream_U_apdone_blk : STD_LOGIC;
    signal regslice_both_raw_data_im_i_stream_U_apdone_blk : STD_LOGIC;
    signal ap_block_state13 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal raw_data_real_i_stream_TVALID_int_regslice : STD_LOGIC;
    signal raw_data_real_i_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_raw_data_real_i_stream_U_vld_out : STD_LOGIC;
    signal raw_data_im_i_stream_TVALID_int_regslice : STD_LOGIC;
    signal raw_data_im_i_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_raw_data_im_i_stream_U_vld_out : STD_LOGIC;
    signal ap_condition_398 : BOOLEAN;
    signal ap_condition_405 : BOOLEAN;
    signal ap_condition_399 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mem_read_top_rfi_C_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        raw_data_real_i_mem : OUT STD_LOGIC_VECTOR (63 downto 0);
        raw_data_im_i_mem : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mem_read_top_rfi_C_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component mem_read_top_rfi_C_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component mem_read_top_rfi_C_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        raw_data_real_i_mem => raw_data_real_i_mem,
        raw_data_im_i_mem => raw_data_im_i_mem,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_local_deadlock => ap_local_deadlock);

    gmem_m_axi_U : component mem_read_top_rfi_C_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 10,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RFIFONUM => gmem_RFIFONUM,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    regslice_both_raw_data_real_i_stream_U : component mem_read_top_rfi_C_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => gmem_RDATA,
        vld_in => raw_data_real_i_stream_TVALID_int_regslice,
        ack_in => raw_data_real_i_stream_TREADY_int_regslice,
        data_out => raw_data_real_i_stream_TDATA,
        vld_out => regslice_both_raw_data_real_i_stream_U_vld_out,
        ack_out => raw_data_real_i_stream_TREADY,
        apdone_blk => regslice_both_raw_data_real_i_stream_U_apdone_blk);

    regslice_both_raw_data_im_i_stream_U : component mem_read_top_rfi_C_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => gmem_RDATA,
        vld_in => raw_data_im_i_stream_TVALID_int_regslice,
        ack_in => raw_data_im_i_stream_TREADY_int_regslice,
        data_out => raw_data_im_i_stream_TDATA,
        vld_out => regslice_both_raw_data_im_i_stream_U_vld_out,
        ack_out => raw_data_im_i_stream_TREADY,
        apdone_blk => regslice_both_raw_data_im_i_stream_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_retval_0_i11_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_398)) then
                if ((ap_const_lv1_0 = and_ln56_1_fu_285_p2)) then 
                    ap_phi_reg_pp0_iter0_retval_0_i11_reg_153 <= ap_const_lv1_0;
                elsif ((ap_const_lv1_1 = and_ln56_1_fu_285_p2)) then 
                    ap_phi_reg_pp0_iter0_retval_0_i11_reg_153 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_shouldContinue_1_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_398)) then
                if ((ap_const_lv1_0 = and_ln56_fu_186_p2)) then 
                    ap_phi_reg_pp0_iter0_shouldContinue_1_reg_140 <= ap_const_lv1_0;
                elsif ((ap_const_lv1_1 = and_ln56_fu_186_p2)) then 
                    ap_phi_reg_pp0_iter0_shouldContinue_1_reg_140 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    current_rate_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_405)) then
                if ((icmp_ln62_1_fu_340_p2 = ap_const_lv1_1)) then 
                    current_rate <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    current_rate <= add_ln59_1_fu_328_p2;
                end if;
            end if; 
        end if;
    end process;

    current_rate_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_399)) then
                if ((icmp_ln62_fu_241_p2 = ap_const_lv1_1)) then 
                    current_rate_1 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    current_rate_1 <= add_ln59_fu_229_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln56_1_reg_393 <= and_ln56_1_fu_285_p2;
                and_ln56_1_reg_393_pp0_iter1_reg <= and_ln56_1_reg_393;
                and_ln56_1_reg_393_pp0_iter2_reg <= and_ln56_1_reg_393_pp0_iter1_reg;
                and_ln56_1_reg_393_pp0_iter3_reg <= and_ln56_1_reg_393_pp0_iter2_reg;
                and_ln56_1_reg_393_pp0_iter4_reg <= and_ln56_1_reg_393_pp0_iter3_reg;
                and_ln56_reg_380 <= and_ln56_fu_186_p2;
                and_ln56_reg_380_pp0_iter1_reg <= and_ln56_reg_380;
                and_ln56_reg_380_pp0_iter2_reg <= and_ln56_reg_380_pp0_iter1_reg;
                and_ln56_reg_380_pp0_iter3_reg <= and_ln56_reg_380_pp0_iter2_reg;
                and_ln56_reg_380_pp0_iter4_reg <= and_ln56_reg_380_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln62_1_fu_340_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln56_1_fu_285_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                current_factor <= add_ln64_1_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln62_fu_241_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln56_fu_186_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                current_factor_1 <= add_ln64_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln56_1_fu_285_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_1_reg_397 <= sext_ln173_1_fu_318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln56_fu_186_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_reg_384 <= sext_ln173_fu_219_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                raw_data_im_i_mem_read_reg_370 <= raw_data_im_i_mem;
                raw_data_real_i_mem_read_reg_375 <= raw_data_real_i_mem;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_CS_fsm_state13, regslice_both_raw_data_real_i_stream_U_apdone_blk, regslice_both_raw_data_im_i_stream_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((regslice_both_raw_data_im_i_stream_U_apdone_blk = ap_const_logic_1) or (regslice_both_raw_data_real_i_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln58_1_fu_303_p2 <= std_logic_vector(signed(sext_ln58_1_fu_299_p1) + signed(raw_data_im_i_mem_read_reg_370));
    add_ln58_fu_204_p2 <= std_logic_vector(signed(sext_ln58_fu_200_p1) + signed(raw_data_real_i_mem_read_reg_375));
    add_ln59_1_fu_328_p2 <= std_logic_vector(unsigned(current_rate) + unsigned(ap_const_lv32_1));
    add_ln59_fu_229_p2 <= std_logic_vector(unsigned(current_rate_1) + unsigned(ap_const_lv32_1));
    add_ln64_1_fu_352_p2 <= std_logic_vector(unsigned(current_factor) + unsigned(ap_const_lv32_1));
    add_ln64_fu_253_p2 <= std_logic_vector(unsigned(current_factor_1) + unsigned(ap_const_lv32_1));
    and_ln56_1_fu_285_p2 <= (icmp_ln56_3_fu_279_p2 and icmp_ln56_2_fu_269_p2);
    and_ln56_fu_186_p2 <= (icmp_ln56_fu_170_p2 and icmp_ln56_1_fu_180_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(3);

    ap_ST_fsm_state13_blk_assign_proc : process(regslice_both_raw_data_real_i_stream_U_apdone_blk, regslice_both_raw_data_im_i_stream_U_apdone_blk)
    begin
        if (((regslice_both_raw_data_im_i_stream_U_apdone_blk = ap_const_logic_1) or (regslice_both_raw_data_real_i_stream_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, and_ln56_reg_380_pp0_iter3_reg, and_ln56_1_reg_393_pp0_iter4_reg, ap_enable_reg_pp0_iter5, gmem_RVALID, raw_data_real_i_stream_TREADY_int_regslice, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg)) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, and_ln56_reg_380_pp0_iter3_reg, ap_enable_reg_pp0_iter1, and_ln56_1_reg_393_pp0_iter4_reg, ap_enable_reg_pp0_iter5, gmem_RVALID, ap_block_state4_io, ap_block_state10_io, ap_block_state12_io, raw_data_real_i_stream_TREADY_int_regslice, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state12_io) or ((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or ((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg)) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, and_ln56_reg_380_pp0_iter3_reg, ap_enable_reg_pp0_iter1, and_ln56_1_reg_393_pp0_iter4_reg, ap_enable_reg_pp0_iter5, gmem_RVALID, ap_block_state4_io, ap_block_state10_io, ap_block_state12_io, raw_data_real_i_stream_TREADY_int_regslice, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state12_io) or ((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)))) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or ((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg)) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg)))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter4, and_ln56_1_reg_393_pp0_iter4_reg, and_ln56_reg_380_pp0_iter4_reg, gmem_RVALID, raw_data_real_i_stream_TREADY_int_regslice, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)) or ((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter4_reg)) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, and_ln56_1_reg_393_pp0_iter4_reg, and_ln56_reg_380_pp0_iter4_reg, gmem_RVALID, ap_block_state3_io, ap_block_state11_io, raw_data_real_i_stream_TREADY_int_regslice, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)) or ((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter4_reg)) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, and_ln56_1_reg_393_pp0_iter4_reg, and_ln56_reg_380_pp0_iter4_reg, gmem_RVALID, ap_block_state3_io, ap_block_state11_io, raw_data_real_i_stream_TREADY_int_regslice, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)) or ((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter4_reg)) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)))));
    end process;


    ap_block_state10_io_assign_proc : process(and_ln56_reg_380_pp0_iter3_reg, raw_data_real_i_stream_TREADY_int_regslice)
    begin
                ap_block_state10_io <= ((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg));
    end process;


    ap_block_state10_pp0_stage0_iter4_assign_proc : process(and_ln56_reg_380_pp0_iter3_reg, gmem_RVALID, raw_data_real_i_stream_TREADY_int_regslice)
    begin
                ap_block_state10_pp0_stage0_iter4 <= (((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg)) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg)));
    end process;


    ap_block_state11_io_assign_proc : process(and_ln56_1_reg_393_pp0_iter4_reg, and_ln56_reg_380_pp0_iter4_reg, raw_data_real_i_stream_TREADY_int_regslice, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_state11_io <= (((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)) or ((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter4_reg)));
    end process;


    ap_block_state11_pp0_stage1_iter4_assign_proc : process(and_ln56_1_reg_393_pp0_iter4_reg, and_ln56_reg_380_pp0_iter4_reg, gmem_RVALID, raw_data_real_i_stream_TREADY_int_regslice, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_state11_pp0_stage1_iter4 <= (((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)) or ((raw_data_real_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter4_reg)) or ((gmem_RVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg)));
    end process;


    ap_block_state12_io_assign_proc : process(and_ln56_1_reg_393_pp0_iter4_reg, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_state12_io <= ((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg));
    end process;


    ap_block_state12_pp0_stage0_iter5_assign_proc : process(and_ln56_1_reg_393_pp0_iter4_reg, raw_data_im_i_stream_TREADY_int_regslice)
    begin
                ap_block_state12_pp0_stage0_iter5 <= ((raw_data_im_i_stream_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg));
    end process;


    ap_block_state13_assign_proc : process(regslice_both_raw_data_real_i_stream_U_apdone_blk, regslice_both_raw_data_im_i_stream_U_apdone_blk)
    begin
                ap_block_state13 <= ((regslice_both_raw_data_im_i_stream_U_apdone_blk = ap_const_logic_1) or (regslice_both_raw_data_real_i_stream_U_apdone_blk = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(and_ln56_reg_380, gmem_ARREADY)
    begin
                ap_block_state3_io <= ((gmem_ARREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_reg_380));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(and_ln56_1_reg_393, gmem_ARREADY)
    begin
                ap_block_state4_io <= ((gmem_ARREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln56_1_reg_393));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_398_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_398 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_399_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, and_ln56_fu_186_p2, ap_block_pp0_stage0_11001)
    begin
                ap_condition_399 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln56_fu_186_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_405_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln56_1_fu_285_p2)
    begin
                ap_condition_405 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln56_1_fu_285_p2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage1, shouldContinue_fu_364_p2, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (shouldContinue_fu_364_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13, regslice_both_raw_data_real_i_stream_U_apdone_blk, regslice_both_raw_data_im_i_stream_U_apdone_blk)
    begin
        if ((not(((regslice_both_raw_data_im_i_stream_U_apdone_blk = ap_const_logic_1) or (regslice_both_raw_data_real_i_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state13, regslice_both_raw_data_real_i_stream_U_apdone_blk, regslice_both_raw_data_im_i_stream_U_apdone_blk)
    begin
        if ((not(((regslice_both_raw_data_im_i_stream_U_apdone_blk = ap_const_logic_1) or (regslice_both_raw_data_real_i_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, and_ln56_reg_380, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln56_1_reg_393, ap_block_pp0_stage0_11001, gmem_addr_reg_384, gmem_addr_1_reg_397, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gmem_ARADDR <= gmem_addr_1_reg_397;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln56_reg_380) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            gmem_ARADDR <= gmem_addr_reg_384;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, and_ln56_reg_380, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln56_1_reg_393, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln56_reg_380) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, and_ln56_reg_380_pp0_iter3_reg, and_ln56_1_reg_393_pp0_iter4_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, and_ln56_reg_380, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln56_1_reg_393)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln56_reg_380) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, and_ln56_reg_380_pp0_iter3_reg, and_ln56_1_reg_393_pp0_iter4_reg)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln56_1_fu_180_p2 <= "1" when (signed(current_factor_1) < signed(ap_const_lv32_1)) else "0";
    icmp_ln56_2_fu_269_p2 <= "1" when (signed(current_rate) < signed(ap_const_lv32_64000)) else "0";
    icmp_ln56_3_fu_279_p2 <= "1" when (signed(current_factor) < signed(ap_const_lv32_1)) else "0";
    icmp_ln56_fu_170_p2 <= "1" when (signed(current_rate_1) < signed(ap_const_lv32_64000)) else "0";
    icmp_ln62_1_fu_340_p2 <= "1" when (signed(add_ln59_1_fu_328_p2) > signed(ap_const_lv32_63FFF)) else "0";
    icmp_ln62_fu_241_p2 <= "1" when (signed(add_ln59_fu_229_p2) > signed(ap_const_lv32_63FFF)) else "0";

    raw_data_im_i_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, and_ln56_1_reg_393_pp0_iter4_reg, ap_enable_reg_pp0_iter5, raw_data_im_i_stream_TREADY_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            raw_data_im_i_stream_TDATA_blk_n <= raw_data_im_i_stream_TREADY_int_regslice;
        else 
            raw_data_im_i_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    raw_data_im_i_stream_TVALID <= regslice_both_raw_data_im_i_stream_U_vld_out;

    raw_data_im_i_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, and_ln56_1_reg_393_pp0_iter4_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_1_reg_393_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            raw_data_im_i_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            raw_data_im_i_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    raw_data_real_i_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, and_ln56_reg_380_pp0_iter3_reg, and_ln56_reg_380_pp0_iter4_reg, raw_data_real_i_stream_TREADY_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            raw_data_real_i_stream_TDATA_blk_n <= raw_data_real_i_stream_TREADY_int_regslice;
        else 
            raw_data_real_i_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    raw_data_real_i_stream_TVALID <= regslice_both_raw_data_real_i_stream_U_vld_out;

    raw_data_real_i_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, and_ln56_reg_380_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln56_reg_380_pp0_iter3_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            raw_data_real_i_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            raw_data_real_i_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln173_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln173_1_fu_308_p4),64));

        sext_ln173_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_209_p4),64));

        sext_ln58_1_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln58_1_fu_291_p3),64));

        sext_ln58_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_192_p3),64));

    shl_ln58_1_fu_291_p3 <= (current_rate & ap_const_lv1_0);
    shl_ln_fu_192_p3 <= (current_rate_1 & ap_const_lv1_0);
    shouldContinue_fu_364_p2 <= (ap_phi_reg_pp0_iter0_shouldContinue_1_reg_140 or ap_phi_reg_pp0_iter0_retval_0_i11_reg_153);
    trunc_ln173_1_fu_308_p4 <= add_ln58_1_fu_303_p2(63 downto 1);
    trunc_ln_fu_209_p4 <= add_ln58_fu_204_p2(63 downto 1);
end behav;
