/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2017 - 2021) :
 *
 * Alexandre Honorat <alexandre.honorat@insa-rennes.fr> (2021)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */

// Generic includes
#include <ap_int.h>
#include <hls_stream.h>


// BEGIN OF AUTOGENERATED PART

// User includes

#include "dataAcq.hpp"
#include "plotRnIHisto.hpp"
#include "madCpt.hpp"
#include "stdCpt.hpp"
#include "plotThreshold.hpp"
#include "rfiFilter.hpp"
#include "plotFilteredData.hpp"
#include "dataRes.hpp"


// Define sizes

#include "PreesmAutoDefinedSizes.h"


// Preesm special actors


static void Brd_Acq_Real(hls::stream<double> &in, hls::stream<double> &out_0, hls::stream<double> &out_1, hls::stream<double> &out_2, hls::stream<double> &out_3, hls::stream<double> &out_4) {
double tmp = in.read();
out_0.write(tmp);
out_1.write(tmp);
out_2.write(tmp);
out_3.write(tmp);
out_4.write(tmp);
}

static void Brd_MAD_R(hls::stream<double> &in, hls::stream<double> &out_0, hls::stream<double> &out_2) {
double tmp = in.read();
out_0.write(tmp);
out_2.write(tmp);
}

static void Brd_STD_R(hls::stream<double> &in, hls::stream<double> &out_1, hls::stream<double> &out_2) {
double tmp = in.read();
out_1.write(tmp);
out_2.write(tmp);
}

static void Brd_Acq_Im(hls::stream<double> &in, hls::stream<double> &out_0, hls::stream<double> &out_1, hls::stream<double> &out_2, hls::stream<double> &out_3, hls::stream<double> &out_4) {
double tmp = in.read();
out_0.write(tmp);
out_1.write(tmp);
out_2.write(tmp);
out_3.write(tmp);
out_4.write(tmp);
}

static void Brd_MAD_I(hls::stream<double> &in, hls::stream<double> &out_0, hls::stream<double> &out_1) {
double tmp = in.read();
out_0.write(tmp);
out_1.write(tmp);
}

static void Brd_STD_I(hls::stream<double> &in, hls::stream<double> &out_0, hls::stream<double> &out_1) {
double tmp = in.read();
out_0.write(tmp);
out_1.write(tmp);
}

static void Brd_Res_Im(hls::stream<double> &in, hls::stream<double> &out_0, hls::stream<double> &out_1) {
double tmp = in.read();
out_0.write(tmp);
out_1.write(tmp);
}

static void Brd_Res_Real(hls::stream<double> &in, hls::stream<double> &out_0, hls::stream<double> &out_1) {
double tmp = in.read();
out_0.write(tmp);
out_1.write(tmp);
}



// Wrappers to init delays



// Wrapper to init actors



// Top function

extern "C" {
void top_graph_top_rfi_C(
){
#pragma HLS interface ap_ctrl_none port=return
#pragma HLS dataflow disable_start_propagation

  static hls::stream<double> stream__Data_Acquisition_raw_data_real_o__Brd_Acq_Real_in;
  const int size_of_stream__data_acquisition_raw_data_real_o__brd_acq_real_in = SIZE_OF_STREAM__DATA_ACQUISITION_RAW_DATA_REAL_O__BRD_ACQ_REAL_IN;
#pragma HLS stream variable=stream__Data_Acquisition_raw_data_real_o__Brd_Acq_Real_in depth=size_of_stream__data_acquisition_raw_data_real_o__brd_acq_real_in
  static hls::stream<double> stream__Brd_Acq_Real_out_0__Plot_RnI_Histo_raw_data_real_i;
  const int size_of_stream__brd_acq_real_out_0__plot_rni_histo_raw_data_real_i = SIZE_OF_STREAM__BRD_ACQ_REAL_OUT_0__PLOT_RNI_HISTO_RAW_DATA_REAL_I;
#pragma HLS stream variable=stream__Brd_Acq_Real_out_0__Plot_RnI_Histo_raw_data_real_i depth=size_of_stream__brd_acq_real_out_0__plot_rni_histo_raw_data_real_i
  static hls::stream<double> stream__Brd_Acq_Real_out_1__MAD_Computation_raw_data_real_i;
  const int size_of_stream__brd_acq_real_out_1__mad_computation_raw_data_real_i = SIZE_OF_STREAM__BRD_ACQ_REAL_OUT_1__MAD_COMPUTATION_RAW_DATA_REAL_I;
#pragma HLS stream variable=stream__Brd_Acq_Real_out_1__MAD_Computation_raw_data_real_i depth=size_of_stream__brd_acq_real_out_1__mad_computation_raw_data_real_i
  static hls::stream<double> stream__Brd_Acq_Real_out_2__STD_Computation_raw_data_real_i;
  const int size_of_stream__brd_acq_real_out_2__std_computation_raw_data_real_i = SIZE_OF_STREAM__BRD_ACQ_REAL_OUT_2__STD_COMPUTATION_RAW_DATA_REAL_I;
#pragma HLS stream variable=stream__Brd_Acq_Real_out_2__STD_Computation_raw_data_real_i depth=size_of_stream__brd_acq_real_out_2__std_computation_raw_data_real_i
  static hls::stream<double> stream__MAD_Computation_mad_R_o__Brd_MAD_R_in;
  const int size_of_stream__mad_computation_mad_r_o__brd_mad_r_in = SIZE_OF_STREAM__MAD_COMPUTATION_MAD_R_O__BRD_MAD_R_IN;
#pragma HLS stream variable=stream__MAD_Computation_mad_R_o__Brd_MAD_R_in depth=size_of_stream__mad_computation_mad_r_o__brd_mad_r_in
  static hls::stream<double> stream__Brd_MAD_R_out_0__Plot_Threshold_mad_R_i;
  const int size_of_stream__brd_mad_r_out_0__plot_threshold_mad_r_i = SIZE_OF_STREAM__BRD_MAD_R_OUT_0__PLOT_THRESHOLD_MAD_R_I;
#pragma HLS stream variable=stream__Brd_MAD_R_out_0__Plot_Threshold_mad_R_i depth=size_of_stream__brd_mad_r_out_0__plot_threshold_mad_r_i
  static hls::stream<double> stream__Brd_Acq_Real_out_3__Plot_Threshold_raw_data_real_i;
  const int size_of_stream__brd_acq_real_out_3__plot_threshold_raw_data_real_i = SIZE_OF_STREAM__BRD_ACQ_REAL_OUT_3__PLOT_THRESHOLD_RAW_DATA_REAL_I;
#pragma HLS stream variable=stream__Brd_Acq_Real_out_3__Plot_Threshold_raw_data_real_i depth=size_of_stream__brd_acq_real_out_3__plot_threshold_raw_data_real_i
  static hls::stream<double> stream__STD_Computation_std_R_o__Brd_STD_R_in;
  const int size_of_stream__std_computation_std_r_o__brd_std_r_in = SIZE_OF_STREAM__STD_COMPUTATION_STD_R_O__BRD_STD_R_IN;
#pragma HLS stream variable=stream__STD_Computation_std_R_o__Brd_STD_R_in depth=size_of_stream__std_computation_std_r_o__brd_std_r_in
  static hls::stream<double> stream__Brd_STD_R_out_1__Plot_Threshold_std_R_i;
  const int size_of_stream__brd_std_r_out_1__plot_threshold_std_r_i = SIZE_OF_STREAM__BRD_STD_R_OUT_1__PLOT_THRESHOLD_STD_R_I;
#pragma HLS stream variable=stream__Brd_STD_R_out_1__Plot_Threshold_std_R_i depth=size_of_stream__brd_std_r_out_1__plot_threshold_std_r_i
  static hls::stream<double> stream__Brd_MAD_R_out_2__RFI_Filter_mad_R_i;
  const int size_of_stream__brd_mad_r_out_2__rfi_filter_mad_r_i = SIZE_OF_STREAM__BRD_MAD_R_OUT_2__RFI_FILTER_MAD_R_I;
#pragma HLS stream variable=stream__Brd_MAD_R_out_2__RFI_Filter_mad_R_i depth=size_of_stream__brd_mad_r_out_2__rfi_filter_mad_r_i
  static hls::stream<double> stream__Brd_STD_R_out_2__RFI_Filter_std_R_i;
  const int size_of_stream__brd_std_r_out_2__rfi_filter_std_r_i = SIZE_OF_STREAM__BRD_STD_R_OUT_2__RFI_FILTER_STD_R_I;
#pragma HLS stream variable=stream__Brd_STD_R_out_2__RFI_Filter_std_R_i depth=size_of_stream__brd_std_r_out_2__rfi_filter_std_r_i
  static hls::stream<double> stream__RFI_Filter_filtered_real_data_o__Brd_Res_Real_in;
  const int size_of_stream__rfi_filter_filtered_real_data_o__brd_res_real_in = SIZE_OF_STREAM__RFI_FILTER_FILTERED_REAL_DATA_O__BRD_RES_REAL_IN;
#pragma HLS stream variable=stream__RFI_Filter_filtered_real_data_o__Brd_Res_Real_in depth=size_of_stream__rfi_filter_filtered_real_data_o__brd_res_real_in
  static hls::stream<double> stream__Data_Acquisition_raw_data_im_o__Brd_Acq_Im_in;
  const int size_of_stream__data_acquisition_raw_data_im_o__brd_acq_im_in = SIZE_OF_STREAM__DATA_ACQUISITION_RAW_DATA_IM_O__BRD_ACQ_IM_IN;
#pragma HLS stream variable=stream__Data_Acquisition_raw_data_im_o__Brd_Acq_Im_in depth=size_of_stream__data_acquisition_raw_data_im_o__brd_acq_im_in
  static hls::stream<double> stream__Brd_Acq_Im_out_0__MAD_Computation_raw_data_im_i;
  const int size_of_stream__brd_acq_im_out_0__mad_computation_raw_data_im_i = SIZE_OF_STREAM__BRD_ACQ_IM_OUT_0__MAD_COMPUTATION_RAW_DATA_IM_I;
#pragma HLS stream variable=stream__Brd_Acq_Im_out_0__MAD_Computation_raw_data_im_i depth=size_of_stream__brd_acq_im_out_0__mad_computation_raw_data_im_i
  static hls::stream<double> stream__Brd_Acq_Im_out_1__STD_Computation_raw_data_im_i;
  const int size_of_stream__brd_acq_im_out_1__std_computation_raw_data_im_i = SIZE_OF_STREAM__BRD_ACQ_IM_OUT_1__STD_COMPUTATION_RAW_DATA_IM_I;
#pragma HLS stream variable=stream__Brd_Acq_Im_out_1__STD_Computation_raw_data_im_i depth=size_of_stream__brd_acq_im_out_1__std_computation_raw_data_im_i
  static hls::stream<double> stream__Brd_Acq_Im_out_2__Plot_RnI_Histo_raw_data_im_i;
  const int size_of_stream__brd_acq_im_out_2__plot_rni_histo_raw_data_im_i = SIZE_OF_STREAM__BRD_ACQ_IM_OUT_2__PLOT_RNI_HISTO_RAW_DATA_IM_I;
#pragma HLS stream variable=stream__Brd_Acq_Im_out_2__Plot_RnI_Histo_raw_data_im_i depth=size_of_stream__brd_acq_im_out_2__plot_rni_histo_raw_data_im_i
  static hls::stream<double> stream__Brd_Acq_Im_out_3__Plot_Threshold_raw_data_im_i;
  const int size_of_stream__brd_acq_im_out_3__plot_threshold_raw_data_im_i = SIZE_OF_STREAM__BRD_ACQ_IM_OUT_3__PLOT_THRESHOLD_RAW_DATA_IM_I;
#pragma HLS stream variable=stream__Brd_Acq_Im_out_3__Plot_Threshold_raw_data_im_i depth=size_of_stream__brd_acq_im_out_3__plot_threshold_raw_data_im_i
  static hls::stream<double> stream__MAD_Computation_mad_I_o__Brd_MAD_I_in;
  const int size_of_stream__mad_computation_mad_i_o__brd_mad_i_in = SIZE_OF_STREAM__MAD_COMPUTATION_MAD_I_O__BRD_MAD_I_IN;
#pragma HLS stream variable=stream__MAD_Computation_mad_I_o__Brd_MAD_I_in depth=size_of_stream__mad_computation_mad_i_o__brd_mad_i_in
  static hls::stream<double> stream__STD_Computation_std_I_o__Brd_STD_I_in;
  const int size_of_stream__std_computation_std_i_o__brd_std_i_in = SIZE_OF_STREAM__STD_COMPUTATION_STD_I_O__BRD_STD_I_IN;
#pragma HLS stream variable=stream__STD_Computation_std_I_o__Brd_STD_I_in depth=size_of_stream__std_computation_std_i_o__brd_std_i_in
  static hls::stream<double> stream__Brd_MAD_I_out_0__Plot_Threshold_mad_I_i;
  const int size_of_stream__brd_mad_i_out_0__plot_threshold_mad_i_i = SIZE_OF_STREAM__BRD_MAD_I_OUT_0__PLOT_THRESHOLD_MAD_I_I;
#pragma HLS stream variable=stream__Brd_MAD_I_out_0__Plot_Threshold_mad_I_i depth=size_of_stream__brd_mad_i_out_0__plot_threshold_mad_i_i
  static hls::stream<double> stream__Brd_MAD_I_out_1__RFI_Filter_mad_I_i;
  const int size_of_stream__brd_mad_i_out_1__rfi_filter_mad_i_i = SIZE_OF_STREAM__BRD_MAD_I_OUT_1__RFI_FILTER_MAD_I_I;
#pragma HLS stream variable=stream__Brd_MAD_I_out_1__RFI_Filter_mad_I_i depth=size_of_stream__brd_mad_i_out_1__rfi_filter_mad_i_i
  static hls::stream<double> stream__Brd_STD_I_out_0__Plot_Threshold_std_I_i;
  const int size_of_stream__brd_std_i_out_0__plot_threshold_std_i_i = SIZE_OF_STREAM__BRD_STD_I_OUT_0__PLOT_THRESHOLD_STD_I_I;
#pragma HLS stream variable=stream__Brd_STD_I_out_0__Plot_Threshold_std_I_i depth=size_of_stream__brd_std_i_out_0__plot_threshold_std_i_i
  static hls::stream<double> stream__Brd_STD_I_out_1__RFI_Filter_std_I_i;
  const int size_of_stream__brd_std_i_out_1__rfi_filter_std_i_i = SIZE_OF_STREAM__BRD_STD_I_OUT_1__RFI_FILTER_STD_I_I;
#pragma HLS stream variable=stream__Brd_STD_I_out_1__RFI_Filter_std_I_i depth=size_of_stream__brd_std_i_out_1__rfi_filter_std_i_i
  static hls::stream<double> stream__Brd_Acq_Im_out_4__RFI_Filter_raw_data_im_i;
  const int size_of_stream__brd_acq_im_out_4__rfi_filter_raw_data_im_i = SIZE_OF_STREAM__BRD_ACQ_IM_OUT_4__RFI_FILTER_RAW_DATA_IM_I;
#pragma HLS stream variable=stream__Brd_Acq_Im_out_4__RFI_Filter_raw_data_im_i depth=size_of_stream__brd_acq_im_out_4__rfi_filter_raw_data_im_i
  static hls::stream<double> stream__Brd_Acq_Real_out_4__RFI_Filter_raw_data_real_i;
  const int size_of_stream__brd_acq_real_out_4__rfi_filter_raw_data_real_i = SIZE_OF_STREAM__BRD_ACQ_REAL_OUT_4__RFI_FILTER_RAW_DATA_REAL_I;
#pragma HLS stream variable=stream__Brd_Acq_Real_out_4__RFI_Filter_raw_data_real_i depth=size_of_stream__brd_acq_real_out_4__rfi_filter_raw_data_real_i
  static hls::stream<double> stream__RFI_Filter_filtered_im_data_o__Brd_Res_Im_in;
  const int size_of_stream__rfi_filter_filtered_im_data_o__brd_res_im_in = SIZE_OF_STREAM__RFI_FILTER_FILTERED_IM_DATA_O__BRD_RES_IM_IN;
#pragma HLS stream variable=stream__RFI_Filter_filtered_im_data_o__Brd_Res_Im_in depth=size_of_stream__rfi_filter_filtered_im_data_o__brd_res_im_in
  static hls::stream<double> stream__Brd_Res_Im_out_0__Plot_Filtered_Data_filtered_im_data_i;
  const int size_of_stream__brd_res_im_out_0__plot_filtered_data_filtered_im_data_i = SIZE_OF_STREAM__BRD_RES_IM_OUT_0__PLOT_FILTERED_DATA_FILTERED_IM_DATA_I;
#pragma HLS stream variable=stream__Brd_Res_Im_out_0__Plot_Filtered_Data_filtered_im_data_i depth=size_of_stream__brd_res_im_out_0__plot_filtered_data_filtered_im_data_i
  static hls::stream<double> stream__Brd_Res_Im_out_1__Data_Restitution_filtered_im_data_i;
  const int size_of_stream__brd_res_im_out_1__data_restitution_filtered_im_data_i = SIZE_OF_STREAM__BRD_RES_IM_OUT_1__DATA_RESTITUTION_FILTERED_IM_DATA_I;
#pragma HLS stream variable=stream__Brd_Res_Im_out_1__Data_Restitution_filtered_im_data_i depth=size_of_stream__brd_res_im_out_1__data_restitution_filtered_im_data_i
  static hls::stream<double> stream__Brd_Res_Real_out_0__Plot_Filtered_Data_filtered_real_data_i;
  const int size_of_stream__brd_res_real_out_0__plot_filtered_data_filtered_real_data_i = SIZE_OF_STREAM__BRD_RES_REAL_OUT_0__PLOT_FILTERED_DATA_FILTERED_REAL_DATA_I;
#pragma HLS stream variable=stream__Brd_Res_Real_out_0__Plot_Filtered_Data_filtered_real_data_i depth=size_of_stream__brd_res_real_out_0__plot_filtered_data_filtered_real_data_i
  static hls::stream<double> stream__Brd_Res_Real_out_1__Data_Restitution_filtered_real_data_i;
  const int size_of_stream__brd_res_real_out_1__data_restitution_filtered_real_data_i = SIZE_OF_STREAM__BRD_RES_REAL_OUT_1__DATA_RESTITUTION_FILTERED_REAL_DATA_I;
#pragma HLS stream variable=stream__Brd_Res_Real_out_1__Data_Restitution_filtered_real_data_i depth=size_of_stream__brd_res_real_out_1__data_restitution_filtered_real_data_i

  DataAcq<200,2048,409600,4096,double>(stream__Data_Acquisition_raw_data_real_o__Brd_Acq_Real_in,stream__Data_Acquisition_raw_data_im_o__Brd_Acq_Im_in);
  Brd_Acq_Real(stream__Data_Acquisition_raw_data_real_o__Brd_Acq_Real_in, stream__Brd_Acq_Real_out_0__Plot_RnI_Histo_raw_data_real_i, stream__Brd_Acq_Real_out_1__MAD_Computation_raw_data_real_i, stream__Brd_Acq_Real_out_2__STD_Computation_raw_data_real_i, stream__Brd_Acq_Real_out_3__Plot_Threshold_raw_data_real_i, stream__Brd_Acq_Real_out_4__RFI_Filter_raw_data_real_i);
  Brd_Acq_Im(stream__Data_Acquisition_raw_data_im_o__Brd_Acq_Im_in, stream__Brd_Acq_Im_out_0__MAD_Computation_raw_data_im_i, stream__Brd_Acq_Im_out_1__STD_Computation_raw_data_im_i, stream__Brd_Acq_Im_out_2__Plot_RnI_Histo_raw_data_im_i, stream__Brd_Acq_Im_out_3__Plot_Threshold_raw_data_im_i, stream__Brd_Acq_Im_out_4__RFI_Filter_raw_data_im_i);
  #ifndef __SYNTHESIS__
  for(int i = 0; i < 200; i++) {
#endif
    MADCpt<2048,3,double>(stream__Brd_Acq_Real_out_1__MAD_Computation_raw_data_real_i,stream__Brd_Acq_Im_out_0__MAD_Computation_raw_data_im_i,stream__MAD_Computation_mad_R_o__Brd_MAD_R_in,stream__MAD_Computation_mad_I_o__Brd_MAD_I_in);
#ifndef __SYNTHESIS__
  }
#endif
  PlotRnIHisto<409600,1,double>(stream__Brd_Acq_Real_out_0__Plot_RnI_Histo_raw_data_real_i,stream__Brd_Acq_Im_out_2__Plot_RnI_Histo_raw_data_im_i);
  #ifndef __SYNTHESIS__
  for(int i = 0; i < 200; i++) {
#endif
    STDCpt<2048,3,double>(stream__Brd_Acq_Real_out_2__STD_Computation_raw_data_real_i,stream__Brd_Acq_Im_out_1__STD_Computation_raw_data_im_i,stream__STD_Computation_std_R_o__Brd_STD_R_in,stream__STD_Computation_std_I_o__Brd_STD_I_in);
#ifndef __SYNTHESIS__
  }
#endif
  #ifndef __SYNTHESIS__
  for(int i = 0; i < 200; i++) {
#endif
    Brd_STD_R(stream__STD_Computation_std_R_o__Brd_STD_R_in, stream__Brd_STD_R_out_1__Plot_Threshold_std_R_i, stream__Brd_STD_R_out_2__RFI_Filter_std_R_i);
#ifndef __SYNTHESIS__
  }
#endif
  #ifndef __SYNTHESIS__
  for(int i = 0; i < 200; i++) {
#endif
    Brd_STD_I(stream__STD_Computation_std_I_o__Brd_STD_I_in, stream__Brd_STD_I_out_0__Plot_Threshold_std_I_i, stream__Brd_STD_I_out_1__RFI_Filter_std_I_i);
#ifndef __SYNTHESIS__
  }
#endif
  #ifndef __SYNTHESIS__
  for(int i = 0; i < 200; i++) {
#endif
    Brd_MAD_R(stream__MAD_Computation_mad_R_o__Brd_MAD_R_in, stream__Brd_MAD_R_out_0__Plot_Threshold_mad_R_i, stream__Brd_MAD_R_out_2__RFI_Filter_mad_R_i);
#ifndef __SYNTHESIS__
  }
#endif
  #ifndef __SYNTHESIS__
  for(int i = 0; i < 200; i++) {
#endif
    Brd_MAD_I(stream__MAD_Computation_mad_I_o__Brd_MAD_I_in, stream__Brd_MAD_I_out_0__Plot_Threshold_mad_I_i, stream__Brd_MAD_I_out_1__RFI_Filter_mad_I_i);
#ifndef __SYNTHESIS__
  }
#endif
  #ifndef __SYNTHESIS__
  for(int i = 0; i < 200; i++) {
#endif
    RFIFilter<0,2048,double>(stream__Brd_MAD_R_out_2__RFI_Filter_mad_R_i,stream__Brd_MAD_I_out_1__RFI_Filter_mad_I_i,stream__Brd_STD_R_out_2__RFI_Filter_std_R_i,stream__Brd_STD_I_out_1__RFI_Filter_std_I_i,stream__Brd_Acq_Real_out_4__RFI_Filter_raw_data_real_i,stream__Brd_Acq_Im_out_4__RFI_Filter_raw_data_im_i,stream__RFI_Filter_filtered_real_data_o__Brd_Res_Real_in,stream__RFI_Filter_filtered_im_data_o__Brd_Res_Im_in);
#ifndef __SYNTHESIS__
  }
#endif
  PlotThreshold<128000000,409600,1,double>(stream__Brd_Acq_Real_out_3__Plot_Threshold_raw_data_real_i,stream__Brd_Acq_Im_out_3__Plot_Threshold_raw_data_im_i,stream__Brd_MAD_R_out_0__Plot_Threshold_mad_R_i,stream__Brd_MAD_I_out_0__Plot_Threshold_mad_I_i,stream__Brd_STD_R_out_1__Plot_Threshold_std_R_i,stream__Brd_STD_I_out_0__Plot_Threshold_std_I_i);
  Brd_Res_Im(stream__RFI_Filter_filtered_im_data_o__Brd_Res_Im_in, stream__Brd_Res_Im_out_0__Plot_Filtered_Data_filtered_im_data_i, stream__Brd_Res_Im_out_1__Data_Restitution_filtered_im_data_i);
  Brd_Res_Real(stream__RFI_Filter_filtered_real_data_o__Brd_Res_Real_in, stream__Brd_Res_Real_out_0__Plot_Filtered_Data_filtered_real_data_i, stream__Brd_Res_Real_out_1__Data_Restitution_filtered_real_data_i);
  PlotFilteredData<409600,128000000,1,double>(stream__Brd_Res_Real_out_0__Plot_Filtered_Data_filtered_real_data_i,stream__Brd_Res_Im_out_0__Plot_Filtered_Data_filtered_im_data_i);
  DataRes<200,2048,409600,4096,double>(stream__Brd_Res_Real_out_1__Data_Restitution_filtered_real_data_i,stream__Brd_Res_Im_out_1__Data_Restitution_filtered_im_data_i);
}
}


// END OF AUTOGENERATED PART

