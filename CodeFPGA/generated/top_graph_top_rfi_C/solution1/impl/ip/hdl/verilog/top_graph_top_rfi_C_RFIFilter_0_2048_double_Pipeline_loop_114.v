// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_graph_top_rfi_C_RFIFilter_0_2048_double_Pipeline_loop_114 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RIi_address0,
        RIi_ce0,
        RIi_q0,
        sub_i_neg_i,
        icmp_ln20_2,
        sub_i_i,
        RIo_address0,
        RIo_ce0,
        RIo_we0,
        RIo_d0,
        sub_i_to_int_i,
        av_threshold_i
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] RIi_address0;
output   RIi_ce0;
input  [63:0] RIi_q0;
input  [62:0] sub_i_neg_i;
input  [0:0] icmp_ln20_2;
input  [63:0] sub_i_i;
output  [10:0] RIo_address0;
output   RIo_ce0;
output   RIo_we0;
output  [63:0] RIo_d0;
input  [62:0] sub_i_to_int_i;
input  [63:0] av_threshold_i;

reg ap_idle;
reg RIi_ce0;
reg RIo_ce0;
reg RIo_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln19_fu_146_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] i_12_cast_i_fu_158_p1;
reg   [63:0] i_12_cast_i_reg_320;
reg   [63:0] i_12_cast_i_reg_320_pp0_iter1_reg;
reg   [63:0] i_12_cast_i_reg_320_pp0_iter2_reg;
reg   [63:0] i_12_cast_i_reg_320_pp0_iter3_reg;
wire   [0:0] icmp_ln20_3_fu_173_p2;
reg   [0:0] icmp_ln20_3_reg_330;
reg   [0:0] icmp_ln20_3_reg_330_pp0_iter1_reg;
reg   [0:0] icmp_ln20_3_reg_330_pp0_iter2_reg;
wire   [0:0] icmp_ln22_fu_189_p2;
reg   [0:0] icmp_ln22_reg_335;
reg   [0:0] icmp_ln22_reg_335_pp0_iter1_reg;
reg   [0:0] icmp_ln22_reg_335_pp0_iter2_reg;
reg   [63:0] RIi_load_reg_340;
reg   [63:0] RIi_load_reg_340_pp0_iter2_reg;
reg   [63:0] RIi_load_reg_340_pp0_iter3_reg;
wire   [0:0] and_ln20_1_fu_251_p2;
reg   [0:0] and_ln20_1_reg_350;
wire   [0:0] and_ln22_1_fu_273_p2;
reg   [0:0] and_ln22_1_reg_355;
wire    ap_block_pp0_stage0;
reg   [11:0] i_fu_60;
wire   [11:0] add_ln19_fu_152_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i_10;
wire   [10:0] tmp_9_fu_163_p4;
wire   [10:0] tmp_12_fu_179_p4;
wire   [63:0] bitcast_ln20_fu_200_p1;
wire   [10:0] tmp_7_fu_203_p4;
wire   [51:0] trunc_ln20_fu_213_p1;
wire   [0:0] icmp_ln20_1_fu_223_p2;
wire   [0:0] icmp_ln20_fu_217_p2;
wire   [0:0] or_ln20_fu_229_p2;
wire   [0:0] or_ln20_1_fu_235_p2;
wire   [0:0] and_ln20_fu_239_p2;
wire   [0:0] grp_fu_125_p2;
wire   [0:0] and_ln20_2_fu_245_p2;
wire   [0:0] grp_fu_120_p2;
wire   [0:0] or_ln22_fu_257_p2;
wire   [0:0] and_ln22_fu_261_p2;
wire   [0:0] grp_fu_134_p2;
wire   [0:0] and_ln22_2_fu_267_p2;
wire   [0:0] grp_fu_129_p2;
wire   [63:0] select_ln22_fu_279_p3;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_graph_top_rfi_C_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U195(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(RIi_load_reg_340),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_120_p2)
);

top_graph_top_rfi_C_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U196(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(RIi_load_reg_340),
    .din1(sub_i_i),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_125_p2)
);

top_graph_top_rfi_C_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U197(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(RIi_load_reg_340),
    .din1(64'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_129_p2)
);

top_graph_top_rfi_C_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U198(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(RIi_load_reg_340),
    .din1(av_threshold_i),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_134_p2)
);

top_graph_top_rfi_C_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_146_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_60 <= add_ln19_fu_152_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        RIi_load_reg_340 <= RIi_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_12_cast_i_reg_320_pp0_iter1_reg[11 : 0] <= i_12_cast_i_reg_320[11 : 0];
        icmp_ln20_3_reg_330_pp0_iter1_reg <= icmp_ln20_3_reg_330;
        icmp_ln22_reg_335_pp0_iter1_reg <= icmp_ln22_reg_335;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        RIi_load_reg_340_pp0_iter2_reg <= RIi_load_reg_340;
        RIi_load_reg_340_pp0_iter3_reg <= RIi_load_reg_340_pp0_iter2_reg;
        and_ln20_1_reg_350 <= and_ln20_1_fu_251_p2;
        and_ln22_1_reg_355 <= and_ln22_1_fu_273_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        i_12_cast_i_reg_320_pp0_iter2_reg[11 : 0] <= i_12_cast_i_reg_320_pp0_iter1_reg[11 : 0];
        i_12_cast_i_reg_320_pp0_iter3_reg[11 : 0] <= i_12_cast_i_reg_320_pp0_iter2_reg[11 : 0];
        icmp_ln20_3_reg_330_pp0_iter2_reg <= icmp_ln20_3_reg_330_pp0_iter1_reg;
        icmp_ln22_reg_335_pp0_iter2_reg <= icmp_ln22_reg_335_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_146_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_12_cast_i_reg_320[11 : 0] <= i_12_cast_i_fu_158_p1[11 : 0];
        icmp_ln20_3_reg_330 <= icmp_ln20_3_fu_173_p2;
        icmp_ln22_reg_335 <= icmp_ln22_fu_189_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        RIi_ce0 = 1'b1;
    end else begin
        RIi_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        RIo_ce0 = 1'b1;
    end else begin
        RIo_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        RIo_we0 = 1'b1;
    end else begin
        RIo_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_146_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_10 = 12'd0;
    end else begin
        ap_sig_allocacmp_i_10 = i_fu_60;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RIi_address0 = i_12_cast_i_fu_158_p1;

assign RIo_address0 = i_12_cast_i_reg_320_pp0_iter3_reg;

assign RIo_d0 = ((and_ln20_1_reg_350[0:0] == 1'b1) ? sub_i_i : select_ln22_fu_279_p3);

assign add_ln19_fu_152_p2 = (ap_sig_allocacmp_i_10 + 12'd1);

assign and_ln20_1_fu_251_p2 = (grp_fu_120_p2 & and_ln20_2_fu_245_p2);

assign and_ln20_2_fu_245_p2 = (grp_fu_125_p2 & and_ln20_fu_239_p2);

assign and_ln20_fu_239_p2 = (or_ln20_fu_229_p2 & or_ln20_1_fu_235_p2);

assign and_ln22_1_fu_273_p2 = (grp_fu_129_p2 & and_ln22_2_fu_267_p2);

assign and_ln22_2_fu_267_p2 = (grp_fu_134_p2 & and_ln22_fu_261_p2);

assign and_ln22_fu_261_p2 = (or_ln22_fu_257_p2 & or_ln20_fu_229_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln20_fu_200_p1 = RIi_load_reg_340_pp0_iter2_reg;

assign i_12_cast_i_fu_158_p1 = ap_sig_allocacmp_i_10;

assign icmp_ln19_fu_146_p2 = ((ap_sig_allocacmp_i_10 == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_223_p2 = ((trunc_ln20_fu_213_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_3_fu_173_p2 = ((tmp_9_fu_163_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_217_p2 = ((tmp_7_fu_203_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_189_p2 = ((tmp_12_fu_179_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln20_1_fu_235_p2 = (icmp_ln20_3_reg_330_pp0_iter2_reg | icmp_ln20_2);

assign or_ln20_fu_229_p2 = (icmp_ln20_fu_217_p2 | icmp_ln20_1_fu_223_p2);

assign or_ln22_fu_257_p2 = (icmp_ln22_reg_335_pp0_iter2_reg | icmp_ln20_2);

assign select_ln22_fu_279_p3 = ((and_ln22_1_reg_355[0:0] == 1'b1) ? av_threshold_i : RIi_load_reg_340_pp0_iter3_reg);

assign tmp_12_fu_179_p4 = {{sub_i_to_int_i[62:52]}};

assign tmp_7_fu_203_p4 = {{bitcast_ln20_fu_200_p1[62:52]}};

assign tmp_9_fu_163_p4 = {{sub_i_neg_i[62:52]}};

assign trunc_ln20_fu_213_p1 = bitcast_ln20_fu_200_p1[51:0];

always @ (posedge ap_clk) begin
    i_12_cast_i_reg_320[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    i_12_cast_i_reg_320_pp0_iter1_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    i_12_cast_i_reg_320_pp0_iter2_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    i_12_cast_i_reg_320_pp0_iter3_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //top_graph_top_rfi_C_RFIFilter_0_2048_double_Pipeline_loop_114
