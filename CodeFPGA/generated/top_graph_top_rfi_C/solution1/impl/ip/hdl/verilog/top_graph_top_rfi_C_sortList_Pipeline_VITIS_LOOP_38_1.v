// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_graph_top_rfi_C_sortList_Pipeline_VITIS_LOOP_38_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_address0,
        data_ce0,
        data_q0,
        trunc_ln,
        count_address0,
        count_ce0,
        count_we0,
        count_d0,
        count_address1,
        count_ce1,
        count_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] data_address0;
output   data_ce0;
input  [63:0] data_q0;
input  [18:0] trunc_ln;
output  [18:0] count_address0;
output   count_ce0;
output   count_we0;
output  [31:0] count_d0;
output  [18:0] count_address1;
output   count_ce1;
input  [31:0] count_q1;

reg ap_idle;
reg data_ce0;
reg count_ce0;
reg count_we0;
reg count_ce1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln38_reg_362;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln38_fu_136_p2;
wire   [63:0] data_V_fu_158_p1;
reg   [63:0] data_V_reg_371;
wire    ap_block_pp0_stage1_11001;
wire   [51:0] tmp_2_fu_172_p1;
reg   [51:0] tmp_2_reg_376;
wire   [0:0] isNeg_fu_186_p3;
reg   [0:0] isNeg_reg_381;
wire   [11:0] ush_fu_204_p3;
reg   [11:0] ush_reg_386;
wire   [18:0] val_fu_266_p3;
reg   [18:0] val_reg_391;
wire   [18:0] result_V_2_fu_273_p2;
reg   [18:0] result_V_2_reg_396;
reg   [18:0] count_addr_reg_401;
wire   [0:0] addr_cmp_fu_305_p2;
reg   [0:0] addr_cmp_reg_407;
wire   [31:0] add_ln40_fu_326_p2;
reg   [31:0] add_ln40_reg_412;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] i_1_cast_fu_148_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln40_fu_297_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] reuse_addr_reg_fu_70;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_74;
reg   [11:0] i_fu_78;
wire   [11:0] add_ln38_fu_142_p2;
reg   [11:0] ap_sig_allocacmp_i_1;
wire   [10:0] tmp_1_fu_162_p4;
wire   [11:0] zext_ln513_fu_176_p1;
wire   [11:0] add_ln513_fu_180_p2;
wire   [10:0] sub_ln1364_fu_194_p2;
wire  signed [11:0] sext_ln1364_fu_200_p1;
wire   [53:0] mantissa_fu_212_p4;
wire  signed [31:0] sext_ln1340_fu_225_p1;
wire   [136:0] zext_ln15_fu_221_p1;
wire   [136:0] zext_ln1340_fu_228_p1;
wire   [136:0] r_V_fu_232_p2;
wire   [0:0] tmp_fu_244_p3;
wire   [136:0] r_V_1_fu_238_p2;
wire   [18:0] zext_ln671_fu_252_p1;
wire   [18:0] tmp_s_fu_256_p4;
wire   [0:0] p_Result_s_fu_279_p3;
wire   [18:0] result_V_fu_286_p3;
wire   [18:0] sub_ln40_fu_292_p2;
wire   [31:0] reuse_select_fu_319_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_graph_top_rfi_C_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln38_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_78 <= add_ln38_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_78 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_addr_reg_fu_70 <= 64'd18446744073709551615;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_addr_reg_fu_70 <= zext_ln40_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_reg_fu_74 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_reg_fu_74 <= add_ln40_reg_412;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln40_reg_412 <= add_ln40_fu_326_p2;
        icmp_ln38_reg_362 <= icmp_ln38_fu_136_p2;
        result_V_2_reg_396 <= result_V_2_fu_273_p2;
        val_reg_391 <= val_fu_266_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        addr_cmp_reg_407 <= addr_cmp_fu_305_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        count_addr_reg_401 <= zext_ln40_fu_297_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_362 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_V_reg_371 <= data_V_fu_158_p1;
        isNeg_reg_381 <= add_ln513_fu_180_p2[32'd11];
        tmp_2_reg_376 <= tmp_2_fu_172_p1;
        ush_reg_386 <= ush_fu_204_p3;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_362 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        count_ce0 = 1'b1;
    end else begin
        count_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        count_ce1 = 1'b1;
    end else begin
        count_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        count_we0 = 1'b1;
    end else begin
        count_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln38_fu_142_p2 = (ap_sig_allocacmp_i_1 + 12'd1);

assign add_ln40_fu_326_p2 = (reuse_select_fu_319_p3 + 32'd1);

assign add_ln513_fu_180_p2 = ($signed(zext_ln513_fu_176_p1) + $signed(12'd3073));

assign addr_cmp_fu_305_p2 = ((reuse_addr_reg_fu_70 == zext_ln40_fu_297_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign count_address0 = count_addr_reg_401;

assign count_address1 = zext_ln40_fu_297_p1;

assign count_d0 = add_ln40_reg_412;

assign data_V_fu_158_p1 = data_q0;

assign data_address0 = i_1_cast_fu_148_p1;

assign i_1_cast_fu_148_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln38_fu_136_p2 = ((ap_sig_allocacmp_i_1 == 12'd2048) ? 1'b1 : 1'b0);

assign isNeg_fu_186_p3 = add_ln513_fu_180_p2[32'd11];

assign mantissa_fu_212_p4 = {{{{1'd1}, {tmp_2_reg_376}}}, {1'd0}};

assign p_Result_s_fu_279_p3 = data_V_reg_371[32'd63];

assign r_V_1_fu_238_p2 = zext_ln15_fu_221_p1 << zext_ln1340_fu_228_p1;

assign r_V_fu_232_p2 = zext_ln15_fu_221_p1 >> zext_ln1340_fu_228_p1;

assign result_V_2_fu_273_p2 = (19'd0 - val_fu_266_p3);

assign result_V_fu_286_p3 = ((p_Result_s_fu_279_p3[0:0] == 1'b1) ? result_V_2_reg_396 : val_reg_391);

assign reuse_select_fu_319_p3 = ((addr_cmp_reg_407[0:0] == 1'b1) ? reuse_reg_fu_74 : count_q1);

assign sext_ln1340_fu_225_p1 = $signed(ush_reg_386);

assign sext_ln1364_fu_200_p1 = $signed(sub_ln1364_fu_194_p2);

assign sub_ln1364_fu_194_p2 = (11'd1023 - tmp_1_fu_162_p4);

assign sub_ln40_fu_292_p2 = (result_V_fu_286_p3 - trunc_ln);

assign tmp_1_fu_162_p4 = {{data_V_fu_158_p1[62:52]}};

assign tmp_2_fu_172_p1 = data_V_fu_158_p1[51:0];

assign tmp_fu_244_p3 = r_V_fu_232_p2[32'd53];

assign tmp_s_fu_256_p4 = {{r_V_1_fu_238_p2[71:53]}};

assign ush_fu_204_p3 = ((isNeg_fu_186_p3[0:0] == 1'b1) ? sext_ln1364_fu_200_p1 : add_ln513_fu_180_p2);

assign val_fu_266_p3 = ((isNeg_reg_381[0:0] == 1'b1) ? zext_ln671_fu_252_p1 : tmp_s_fu_256_p4);

assign zext_ln1340_fu_228_p1 = $unsigned(sext_ln1340_fu_225_p1);

assign zext_ln15_fu_221_p1 = mantissa_fu_212_p4;

assign zext_ln40_fu_297_p1 = sub_ln40_fu_292_p2;

assign zext_ln513_fu_176_p1 = tmp_1_fu_162_p4;

assign zext_ln671_fu_252_p1 = tmp_fu_244_p3;

endmodule //top_graph_top_rfi_C_sortList_Pipeline_VITIS_LOOP_38_1
