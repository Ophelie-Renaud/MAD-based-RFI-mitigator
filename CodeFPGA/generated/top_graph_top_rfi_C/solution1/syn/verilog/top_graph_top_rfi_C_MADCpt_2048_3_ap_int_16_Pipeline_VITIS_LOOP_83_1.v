// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_graph_top_rfi_C_MADCpt_2048_3_ap_int_16_Pipeline_VITIS_LOOP_83_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sorted_list_R_V_address0,
        sorted_list_R_V_ce0,
        sorted_list_R_V_q0,
        rhs_i,
        deviation_list_R_V_address0,
        deviation_list_R_V_ce0,
        deviation_list_R_V_we0,
        deviation_list_R_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] sorted_list_R_V_address0;
output   sorted_list_R_V_ce0;
input  [15:0] sorted_list_R_V_q0;
input  [15:0] rhs_i;
output  [10:0] deviation_list_R_V_address0;
output   deviation_list_R_V_ce0;
output   deviation_list_R_V_we0;
output  [15:0] deviation_list_R_V_d0;

reg ap_idle;
reg sorted_list_R_V_ce0;
reg deviation_list_R_V_ce0;
reg deviation_list_R_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1072_fu_88_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [16:0] rhs_i_cast_fu_76_p1;
reg  signed [16:0] rhs_i_cast_reg_152;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln587_fu_100_p1;
reg   [63:0] zext_ln587_reg_161;
reg   [63:0] zext_ln587_reg_161_pp0_iter1_reg;
wire   [15:0] select_ln180_fu_137_p3;
reg   [15:0] select_ln180_reg_171;
wire    ap_block_pp0_stage0;
reg   [11:0] i_V_28_fu_40;
wire   [11:0] i_V_29_fu_94_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i_V;
wire  signed [16:0] sext_ln232_fu_110_p1;
wire   [16:0] ret_fu_114_p2;
wire   [15:0] trunc_ln180_fu_119_p1;
wire   [0:0] tmp_fu_129_p3;
wire   [15:0] sub_ln180_fu_123_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_graph_top_rfi_C_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1072_fu_88_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_V_28_fu_40 <= i_V_29_fu_94_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_28_fu_40 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        rhs_i_cast_reg_152 <= rhs_i_cast_fu_76_p1;
        select_ln180_reg_171 <= select_ln180_fu_137_p3;
        zext_ln587_reg_161_pp0_iter1_reg[11 : 0] <= zext_ln587_reg_161[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1072_fu_88_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln587_reg_161[11 : 0] <= zext_ln587_fu_100_p1[11 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_88_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V = 12'd0;
    end else begin
        ap_sig_allocacmp_i_V = i_V_28_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        deviation_list_R_V_ce0 = 1'b1;
    end else begin
        deviation_list_R_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        deviation_list_R_V_we0 = 1'b1;
    end else begin
        deviation_list_R_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sorted_list_R_V_ce0 = 1'b1;
    end else begin
        sorted_list_R_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign deviation_list_R_V_address0 = zext_ln587_reg_161_pp0_iter1_reg;

assign deviation_list_R_V_d0 = select_ln180_reg_171;

assign i_V_29_fu_94_p2 = (ap_sig_allocacmp_i_V + 12'd1);

assign icmp_ln1072_fu_88_p2 = ((ap_sig_allocacmp_i_V == 12'd2048) ? 1'b1 : 1'b0);

assign ret_fu_114_p2 = ($signed(sext_ln232_fu_110_p1) - $signed(rhs_i_cast_reg_152));

assign rhs_i_cast_fu_76_p1 = $signed(rhs_i);

assign select_ln180_fu_137_p3 = ((tmp_fu_129_p3[0:0] == 1'b1) ? sub_ln180_fu_123_p2 : trunc_ln180_fu_119_p1);

assign sext_ln232_fu_110_p1 = $signed(sorted_list_R_V_q0);

assign sorted_list_R_V_address0 = zext_ln587_fu_100_p1;

assign sub_ln180_fu_123_p2 = (16'd0 - trunc_ln180_fu_119_p1);

assign tmp_fu_129_p3 = ret_fu_114_p2[32'd16];

assign trunc_ln180_fu_119_p1 = ret_fu_114_p2[15:0];

assign zext_ln587_fu_100_p1 = ap_sig_allocacmp_i_V;

always @ (posedge ap_clk) begin
    zext_ln587_reg_161[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln587_reg_161_pp0_iter1_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //top_graph_top_rfi_C_MADCpt_2048_3_ap_int_16_Pipeline_VITIS_LOOP_83_1
