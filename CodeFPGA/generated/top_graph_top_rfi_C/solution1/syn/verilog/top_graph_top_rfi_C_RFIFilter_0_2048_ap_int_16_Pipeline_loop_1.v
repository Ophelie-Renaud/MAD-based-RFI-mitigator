// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_graph_top_rfi_C_RFIFilter_0_2048_ap_int_16_Pipeline_loop_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RRi_V_address0,
        RRi_V_ce0,
        RRi_V_q0,
        sub_i_i46_i_i,
        RRo_V_address0,
        RRo_V_ce0,
        RRo_V_we0,
        RRo_V_d0,
        select_ln1558,
        conv_i20_i_i
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] RRi_V_address0;
output   RRi_V_ce0;
input  [15:0] RRi_V_q0;
input  [16:0] sub_i_i46_i_i;
output  [10:0] RRo_V_address0;
output   RRo_V_ce0;
output   RRo_V_we0;
output  [15:0] RRo_V_d0;
input  [15:0] select_ln1558;
input  [15:0] conv_i20_i_i;

reg ap_idle;
reg RRi_V_ce0;
reg RRo_V_ce0;
reg RRo_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1072_fu_102_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln587_fu_114_p1;
reg   [63:0] zext_ln587_reg_205;
reg   [63:0] zext_ln587_reg_205_pp0_iter1_reg;
wire   [15:0] select_ln22_fu_171_p3;
reg   [15:0] select_ln22_reg_215;
wire    ap_block_pp0_stage0;
reg   [11:0] i_V_21_fu_46;
wire   [11:0] i_V_24_fu_108_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i_V;
wire  signed [15:0] sext_ln1072_fu_124_p0;
wire  signed [15:0] tmp_fu_128_p1;
wire  signed [16:0] sext_ln1072_fu_124_p1;
wire   [0:0] tmp_fu_128_p3;
wire   [0:0] icmp_ln1072_2_fu_136_p2;
wire  signed [15:0] icmp_ln1080_fu_147_p0;
wire  signed [15:0] icmp_ln1080_1_fu_153_p0;
wire   [0:0] icmp_ln1080_fu_147_p2;
wire   [0:0] icmp_ln1080_1_fu_153_p2;
wire   [0:0] and_ln24_fu_158_p2;
wire  signed [15:0] threshold_V_fu_164_p2;
wire   [0:0] and_ln22_fu_141_p2;
wire   [15:0] threshold_V_fu_164_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_graph_top_rfi_C_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1072_fu_102_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_V_21_fu_46 <= i_V_24_fu_108_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_21_fu_46 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        select_ln22_reg_215 <= select_ln22_fu_171_p3;
        zext_ln587_reg_205_pp0_iter1_reg[11 : 0] <= zext_ln587_reg_205[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1072_fu_102_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln587_reg_205[11 : 0] <= zext_ln587_fu_114_p1[11 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        RRi_V_ce0 = 1'b1;
    end else begin
        RRi_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        RRo_V_ce0 = 1'b1;
    end else begin
        RRo_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        RRo_V_we0 = 1'b1;
    end else begin
        RRo_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_102_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_V = 12'd0;
    end else begin
        ap_sig_allocacmp_i_V = i_V_21_fu_46;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RRi_V_address0 = zext_ln587_fu_114_p1;

assign RRo_V_address0 = zext_ln587_reg_205_pp0_iter1_reg;

assign RRo_V_d0 = select_ln22_reg_215;

assign and_ln22_fu_141_p2 = (tmp_fu_128_p3 & icmp_ln1072_2_fu_136_p2);

assign and_ln24_fu_158_p2 = (icmp_ln1080_fu_147_p2 & icmp_ln1080_1_fu_153_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_V_24_fu_108_p2 = (ap_sig_allocacmp_i_V + 12'd1);

assign icmp_ln1072_2_fu_136_p2 = (($signed(sext_ln1072_fu_124_p1) < $signed(sub_i_i46_i_i)) ? 1'b1 : 1'b0);

assign icmp_ln1072_fu_102_p2 = ((ap_sig_allocacmp_i_V == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln1080_1_fu_153_p0 = RRi_V_q0;

assign icmp_ln1080_1_fu_153_p2 = (($signed(icmp_ln1080_1_fu_153_p0) > $signed(select_ln1558)) ? 1'b1 : 1'b0);

assign icmp_ln1080_fu_147_p0 = RRi_V_q0;

assign icmp_ln1080_fu_147_p2 = (($signed(icmp_ln1080_fu_147_p0) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign select_ln22_fu_171_p3 = ((and_ln22_fu_141_p2[0:0] == 1'b1) ? conv_i20_i_i : threshold_V_fu_164_p3);

assign sext_ln1072_fu_124_p0 = RRi_V_q0;

assign sext_ln1072_fu_124_p1 = sext_ln1072_fu_124_p0;

assign threshold_V_fu_164_p2 = RRi_V_q0;

assign threshold_V_fu_164_p3 = ((and_ln24_fu_158_p2[0:0] == 1'b1) ? select_ln1558 : threshold_V_fu_164_p2);

assign tmp_fu_128_p1 = RRi_V_q0;

assign tmp_fu_128_p3 = tmp_fu_128_p1[32'd15];

assign zext_ln587_fu_114_p1 = ap_sig_allocacmp_i_V;

always @ (posedge ap_clk) begin
    zext_ln587_reg_205[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln587_reg_205_pp0_iter1_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //top_graph_top_rfi_C_RFIFilter_0_2048_ap_int_16_Pipeline_loop_1
