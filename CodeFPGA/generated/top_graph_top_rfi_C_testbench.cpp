/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2017 - 2022) :
 *
 * Mickael Dardaillon <mickael.dardaillon@insa-rennes.fr> (2022)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */

// Generic includes
#include <ap_int.h>
#include <hls_stream.h>

// BEGIN OF AUTOGENERATED PART

// Define sizes

#include "PreesmAutoDefinedSizes.h"


// Top function

void top_graph_top_rfi_C(
  hls::stream<double> &raw_data_real_i_stream,
  hls::stream<double> &raw_data_im_i_stream,
  hls::stream<double> &raw_data_im_o_stream,
  hls::stream<double> &raw_data_real_o_stream,
  hls::stream<double> &mad_R_o_stream,
  hls::stream<double> &raw_data_real_1_stream,
  hls::stream<double> &std_R_o_stream,
  hls::stream<double> &raw_data_im_1_stream,
  hls::stream<double> &mad_I_o_stream,
  hls::stream<double> &std_I_o_stream,
  hls::stream<double> &filtered_im_0_stream,
  hls::stream<double> &filtered_real_0_stream,
  hls::stream<double> &filtered_im_1_stream,
  hls::stream<double> &filtered_real_1_stream);


int main() {

	  static hls::stream<double> raw_data_real_i_stream;
  static hls::stream<double> raw_data_im_i_stream;
  static hls::stream<double> raw_data_im_o_stream;
  static hls::stream<double> raw_data_real_o_stream;
  static hls::stream<double> mad_R_o_stream;
  static hls::stream<double> raw_data_real_1_stream;
  static hls::stream<double> std_R_o_stream;
  static hls::stream<double> raw_data_im_1_stream;
  static hls::stream<double> mad_I_o_stream;
  static hls::stream<double> std_I_o_stream;
  static hls::stream<double> filtered_im_0_stream;
  static hls::stream<double> filtered_real_0_stream;
  static hls::stream<double> filtered_im_1_stream;
  static hls::stream<double> filtered_real_1_stream;


	for (int i = 0; i < NB_ITERATIONS_COSIM; i++) {
		// TODO initialize stream with application values
		  for(int i = 0; i < RATE_OF_RAW_DATA_REAL_I * FACTOR_OF_RAW_DATA_REAL_I; i++) {
    raw_data_real_i_stream.write(0);
  }
  for(int i = 0; i < RATE_OF_RAW_DATA_IM_I * FACTOR_OF_RAW_DATA_IM_I; i++) {
    raw_data_im_i_stream.write(0);
  }


		top_graph_top_rfi_C(raw_data_real_i_stream, raw_data_im_i_stream, raw_data_im_o_stream, raw_data_real_o_stream, mad_R_o_stream, raw_data_real_1_stream, std_R_o_stream, raw_data_im_1_stream, mad_I_o_stream, std_I_o_stream, filtered_im_0_stream, filtered_real_0_stream, filtered_im_1_stream, filtered_real_1_stream);

		// TODO read and verify results
		  for(int i = 0; i < RATE_OF_RAW_DATA_IM_O * FACTOR_OF_RAW_DATA_IM_O; i++) {
    raw_data_im_o_stream.read();
  }
  for(int i = 0; i < RATE_OF_RAW_DATA_REAL_O * FACTOR_OF_RAW_DATA_REAL_O; i++) {
    raw_data_real_o_stream.read();
  }
  for(int i = 0; i < RATE_OF_MAD_R_O * FACTOR_OF_MAD_R_O; i++) {
    mad_R_o_stream.read();
  }
  for(int i = 0; i < RATE_OF_RAW_DATA_REAL_1 * FACTOR_OF_RAW_DATA_REAL_1; i++) {
    raw_data_real_1_stream.read();
  }
  for(int i = 0; i < RATE_OF_STD_R_O * FACTOR_OF_STD_R_O; i++) {
    std_R_o_stream.read();
  }
  for(int i = 0; i < RATE_OF_RAW_DATA_IM_1 * FACTOR_OF_RAW_DATA_IM_1; i++) {
    raw_data_im_1_stream.read();
  }
  for(int i = 0; i < RATE_OF_MAD_I_O * FACTOR_OF_MAD_I_O; i++) {
    mad_I_o_stream.read();
  }
  for(int i = 0; i < RATE_OF_STD_I_O * FACTOR_OF_STD_I_O; i++) {
    std_I_o_stream.read();
  }
  for(int i = 0; i < RATE_OF_FILTERED_IM_0 * FACTOR_OF_FILTERED_IM_0; i++) {
    filtered_im_0_stream.read();
  }
  for(int i = 0; i < RATE_OF_FILTERED_REAL_0 * FACTOR_OF_FILTERED_REAL_0; i++) {
    filtered_real_0_stream.read();
  }
  for(int i = 0; i < RATE_OF_FILTERED_IM_1 * FACTOR_OF_FILTERED_IM_1; i++) {
    filtered_im_1_stream.read();
  }
  for(int i = 0; i < RATE_OF_FILTERED_REAL_1 * FACTOR_OF_FILTERED_REAL_1; i++) {
    filtered_real_1_stream.read();
  }

	}
}

// END OF AUTOGENERATED PART

