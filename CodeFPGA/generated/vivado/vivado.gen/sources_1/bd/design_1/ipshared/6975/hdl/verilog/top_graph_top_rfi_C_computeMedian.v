// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_graph_top_rfi_C_computeMedian (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        list_address0,
        list_ce0,
        list_q0,
        list_address1,
        list_ce1,
        list_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] list_address0;
output   list_ce0;
input  [15:0] list_q0;
output  [10:0] list_address1;
output   list_ce1;
input  [15:0] list_q1;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg list_ce0;
reg list_ce1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] ret_fu_89_p2;
reg   [16:0] ret_reg_340;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [63:0] grp_fu_78_p1;
reg   [63:0] conv_i_reg_350;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_73_p2;
reg   [63:0] val_reg_355;
wire    ap_CS_fsm_state15;
wire   [63:0] reg_fu_99_p1;
reg   [63:0] reg_reg_360;
wire    ap_CS_fsm_state16;
reg   [0:0] p_Result_s_reg_365;
wire   [15:0] median_V_fu_128_p1;
reg   [15:0] median_V_reg_370;
wire   [0:0] icmp_ln354_fu_132_p2;
reg   [0:0] icmp_ln354_reg_376;
wire   [11:0] sh_amt_fu_138_p2;
reg   [11:0] sh_amt_reg_383;
wire   [9:0] trunc_ln357_fu_144_p1;
reg   [9:0] trunc_ln357_reg_389;
wire   [0:0] icmp_ln358_fu_148_p2;
reg   [0:0] icmp_ln358_reg_394;
wire   [0:0] icmp_ln360_fu_154_p2;
reg   [0:0] icmp_ln360_reg_400;
wire   [9:0] sh_amt_2_fu_180_p2;
reg   [9:0] sh_amt_2_reg_406;
wire    ap_CS_fsm_state17;
wire   [15:0] median_V_3_fu_239_p3;
reg   [15:0] median_V_3_reg_411;
wire   [0:0] and_ln379_fu_258_p2;
reg   [0:0] and_ln379_reg_416;
wire   [0:0] or_ln361_fu_276_p2;
reg   [0:0] or_ln361_reg_421;
wire   [15:0] median_V_6_fu_312_p3;
reg   [15:0] median_V_6_reg_426;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state9;
wire  signed [31:0] grp_fu_78_p0;
wire  signed [16:0] sext_ln232_fu_81_p1;
wire  signed [16:0] sext_ln232_1_fu_85_p1;
wire   [10:0] exp_fu_114_p4;
wire   [62:0] trunc_ln337_fu_102_p1;
wire   [11:0] zext_ln342_fu_124_p1;
wire   [51:0] trunc_ln346_fu_160_p1;
wire   [52:0] p_Result_15_fu_163_p3;
wire   [5:0] tmp_fu_185_p4;
wire   [5:0] trunc_ln363_fu_201_p1;
wire   [53:0] zext_ln351_fu_171_p1;
wire   [53:0] zext_ln363_fu_204_p1;
wire   [53:0] lshr_ln363_fu_208_p2;
wire   [0:0] or_ln358_fu_218_p2;
wire   [0:0] xor_ln358_fu_222_p2;
wire   [0:0] and_ln360_fu_228_p2;
wire   [0:0] icmp_ln361_fu_175_p2;
wire   [0:0] and_ln361_fu_233_p2;
wire   [15:0] median_V_1_fu_214_p1;
wire   [0:0] or_ln360_fu_247_p2;
wire   [0:0] icmp_ln379_fu_195_p2;
wire   [0:0] xor_ln360_fu_252_p2;
wire   [0:0] xor_ln361_fu_264_p2;
wire   [0:0] and_ln361_2_fu_270_p2;
wire   [15:0] sh_amt_2cast_fu_281_p1;
wire   [15:0] shl_ln381_fu_284_p2;
wire   [15:0] median_V_4_fu_289_p3;
wire   [0:0] xor_ln354_fu_302_p2;
wire   [0:0] and_ln358_fu_307_p2;
wire   [15:0] median_V_5_fu_295_p3;
wire    ap_CS_fsm_state19;
wire   [15:0] median_V_7_fu_319_p2;
reg   [18:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

top_graph_top_rfi_C_dmul_64ns_64ns_64_7_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_7_max_dsp_1_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_i_reg_350),
    .din1(64'd4602678819172646912),
    .ce(1'b1),
    .dout(grp_fu_73_p2)
);

top_graph_top_rfi_C_sitodp_32s_64_6_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_6_no_dsp_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_78_p0),
    .ce(1'b1),
    .dout(grp_fu_78_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        and_ln379_reg_416 <= and_ln379_fu_258_p2;
        median_V_3_reg_411 <= median_V_3_fu_239_p3;
        or_ln361_reg_421 <= or_ln361_fu_276_p2;
        sh_amt_2_reg_406 <= sh_amt_2_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_i_reg_350 <= grp_fu_78_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        icmp_ln354_reg_376 <= icmp_ln354_fu_132_p2;
        icmp_ln358_reg_394 <= icmp_ln358_fu_148_p2;
        icmp_ln360_reg_400 <= icmp_ln360_fu_154_p2;
        median_V_reg_370 <= median_V_fu_128_p1;
        p_Result_s_reg_365 <= reg_fu_99_p1[32'd63];
        reg_reg_360 <= reg_fu_99_p1;
        sh_amt_reg_383 <= sh_amt_fu_138_p2;
        trunc_ln357_reg_389 <= trunc_ln357_fu_144_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        median_V_6_reg_426 <= median_V_6_fu_312_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ret_reg_340 <= ret_fu_89_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        val_reg_355 <= grp_fu_73_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        list_ce0 = 1'b1;
    end else begin
        list_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        list_ce1 = 1'b1;
    end else begin
        list_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln358_fu_307_p2 = (xor_ln354_fu_302_p2 & icmp_ln358_reg_394);

assign and_ln360_fu_228_p2 = (xor_ln358_fu_222_p2 & icmp_ln360_reg_400);

assign and_ln361_2_fu_270_p2 = (xor_ln361_fu_264_p2 & and_ln360_fu_228_p2);

assign and_ln361_fu_233_p2 = (icmp_ln361_fu_175_p2 & and_ln360_fu_228_p2);

assign and_ln379_fu_258_p2 = (xor_ln360_fu_252_p2 & icmp_ln379_fu_195_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = ((p_Result_s_reg_365[0:0] == 1'b1) ? median_V_7_fu_319_p2 : median_V_6_reg_426);

assign exp_fu_114_p4 = {{reg_fu_99_p1[62:52]}};

assign grp_fu_78_p0 = $signed(ret_reg_340);

assign icmp_ln354_fu_132_p2 = ((trunc_ln337_fu_102_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln358_fu_148_p2 = ((exp_fu_114_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln360_fu_154_p2 = (($signed(sh_amt_fu_138_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln361_fu_175_p2 = (($signed(sh_amt_reg_383) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln379_fu_195_p2 = ((tmp_fu_185_p4 == 6'd0) ? 1'b1 : 1'b0);

assign list_address0 = 64'd1023;

assign list_address1 = 64'd1024;

assign lshr_ln363_fu_208_p2 = zext_ln351_fu_171_p1 >> zext_ln363_fu_204_p1;

assign median_V_1_fu_214_p1 = lshr_ln363_fu_208_p2[15:0];

assign median_V_3_fu_239_p3 = ((and_ln361_fu_233_p2[0:0] == 1'b1) ? median_V_1_fu_214_p1 : 16'd0);

assign median_V_4_fu_289_p3 = ((and_ln379_reg_416[0:0] == 1'b1) ? shl_ln381_fu_284_p2 : median_V_3_reg_411);

assign median_V_5_fu_295_p3 = ((or_ln361_reg_421[0:0] == 1'b1) ? 16'd0 : median_V_4_fu_289_p3);

assign median_V_6_fu_312_p3 = ((and_ln358_fu_307_p2[0:0] == 1'b1) ? median_V_reg_370 : median_V_5_fu_295_p3);

assign median_V_7_fu_319_p2 = (16'd0 - median_V_6_reg_426);

assign median_V_fu_128_p1 = reg_fu_99_p1[15:0];

assign or_ln358_fu_218_p2 = (icmp_ln358_reg_394 | icmp_ln354_reg_376);

assign or_ln360_fu_247_p2 = (or_ln358_fu_218_p2 | icmp_ln360_reg_400);

assign or_ln361_fu_276_p2 = (icmp_ln354_reg_376 | and_ln361_2_fu_270_p2);

assign p_Result_15_fu_163_p3 = {{1'd1}, {trunc_ln346_fu_160_p1}};

assign reg_fu_99_p1 = val_reg_355;

assign ret_fu_89_p2 = ($signed(sext_ln232_fu_81_p1) + $signed(sext_ln232_1_fu_85_p1));

assign sext_ln232_1_fu_85_p1 = $signed(list_q1);

assign sext_ln232_fu_81_p1 = $signed(list_q0);

assign sh_amt_2_fu_180_p2 = (10'd0 - trunc_ln357_reg_389);

assign sh_amt_2cast_fu_281_p1 = sh_amt_2_reg_406;

assign sh_amt_fu_138_p2 = (12'd1075 - zext_ln342_fu_124_p1);

assign shl_ln381_fu_284_p2 = median_V_reg_370 << sh_amt_2cast_fu_281_p1;

assign tmp_fu_185_p4 = {{sh_amt_2_fu_180_p2[9:4]}};

assign trunc_ln337_fu_102_p1 = reg_fu_99_p1[62:0];

assign trunc_ln346_fu_160_p1 = reg_reg_360[51:0];

assign trunc_ln357_fu_144_p1 = sh_amt_fu_138_p2[9:0];

assign trunc_ln363_fu_201_p1 = sh_amt_reg_383[5:0];

assign xor_ln354_fu_302_p2 = (icmp_ln354_reg_376 ^ 1'd1);

assign xor_ln358_fu_222_p2 = (or_ln358_fu_218_p2 ^ 1'd1);

assign xor_ln360_fu_252_p2 = (or_ln360_fu_247_p2 ^ 1'd1);

assign xor_ln361_fu_264_p2 = (icmp_ln361_fu_175_p2 ^ 1'd1);

assign zext_ln342_fu_124_p1 = exp_fu_114_p4;

assign zext_ln351_fu_171_p1 = p_Result_15_fu_163_p3;

assign zext_ln363_fu_204_p1 = trunc_ln363_fu_201_p1;

endmodule //top_graph_top_rfi_C_computeMedian
